// Generated by CoffeeScript 1.3.3
(function() {
  var a, mockDetails, mockRels;

  mockRels = [123456, 789101, 121314];

  mockDetails = {
    lat: 55.8791,
    long: -4.2787,
    thumb_link: "test.jpg"
  };

  window.$ = function() {
    return {
      html: function(msg) {
        return console.log(msg);
      }
    };
  };

  window.$.getJSON = function(url, func) {
    var data;
    if (/details_for_site_id/.test(url)) {
      data = mockDetails;
    } else {
      data = mockRels;
    }
    return func(data);
  };

  window.AR = {
    GeoLocation: function(lat, long, alt) {
      return {
        latitude: lat,
        longitude: long,
        altitude: alt,
        distanceTo: function(loc) {
          return 1000;
        },
        destroy: function() {
          return this.destroyed = true;
        }
      };
    },
    GeoObject: function(loc, options) {
      return {
        locations: [loc],
        destroy: function() {
          return this.destroyed = true;
        },
        drawables: {
          cam: [],
          addCamDrawable: function(d) {
            return this.cam.push(d);
          }
        }
      };
    },
    ImageResource: function(uri, callbacks) {
      return {
        uri: uri,
        callbacks: callbacks,
        getHeight: function() {
          return 10;
        },
        getWidth: function() {
          return 10;
        },
        destroy: function() {
          return this.destroyed = true;
        }
      };
    },
    ImageDrawable: function(imgRes, height, options) {
      return {
        imageResource: imgRes,
        height: height,
        options: options,
        destroy: function() {
          return this.destroyed = true;
        },
        triggers: {
          onClick: ""
        }
      };
    },
    Label: function(text, offset, options) {
      return {};
    }
  };

  a = null;

  describe("Canmore.Architect", function() {
    beforeEach(function() {
      a = new Canmore.Architect;
      return a.sendRequest = function(msg) {
        return null;
      };
    });
    it("sets up current and last location", function() {
      expect(a.currentLocation.latitude).toEqual(0);
      return expect(a.lastLocation.longitude).toEqual(0);
    });
    it("sets up a GeoLocation", function() {
      var l;
      l = new AR.GeoLocation(10, 20, 30, 5);
      a.setLocation(l, 90, 80, 70, 3);
      return expect(l.latitude).toBe(90);
    });
    it("sets the last location", function() {
      var l;
      l = new AR.GeoLocation(10, 20, 30, 5);
      a.setLastLocation(l);
      return expect(a.lastLocation.latitude).toBe(l.latitude);
    });
    it("creates imageResources", function() {
      var geoObject, res;
      geoObject = new AR.GeoObject(new AR.GeoLocation(1, 2, 3, 4), {
        test: "test"
      });
      a.setMode("placemark");
      res = a.createImageResource(mockDetails.thumb_link, geoObject, "placemarkGeoObjects");
      expect(res.uri).toBe(mockDetails.thumb_link);
      res.callbacks.onLoaded();
      return expect(geoObject.enabled).toBe(true);
    });
    it("creates ImageDrawables", function() {
      var d, geoObject, res;
      geoObject = new AR.GeoObject(new AR.GeoLocation(1, 2, 3, 4), {
        test: "test"
      });
      res = a.createImageResource(mockDetails.thumb_link, geoObject);
      d = a.createImageDrawable(res, {
        test: "test"
      });
      return expect(d.height).toBe(2.5);
    });
    it("creates GeoObjects", function() {
      spyOn(a, 'createImageDrawable').andCallThrough();
      spyOn(a, 'createImageResource').andCallThrough();
      a.createGeoObject("test", {
        lat: 55.8791,
        long: -4.2787,
        alt: 0
      }, "test.jpg", mockRels[0], "placemarkGeoObjects");
      expect(a.createImageResource).toHaveBeenCalled();
      expect(a.createImageDrawable).toHaveBeenCalled();
      return expect(a.placemarkGeoObjects[mockRels[0]].drawables.cam[0].imageResource.uri).toBe(mockDetails.thumb_link);
    });
    it("destroys GeoObjects", function() {
      var o;
      a.createGeoObject("test", {
        lat: 55.8791,
        long: -4.2787,
        alt: 0
      }, "test.jpg", mockRels[0], "placemarkGeoObjects");
      o = a.placemarkGeoObjects[mockRels[0]];
      spyOn(o, 'destroy');
      a.destroyGeoObject("placemark", mockRels[0]);
      expect(o.destroy).toHaveBeenCalled();
      return expect(a.placemarkGeoObjects[mockRels[0]]).toBe(void 0);
    });
    it("sets scale and opacity on drawables", function() {
      var d, geoObject, res;
      geoObject = new AR.GeoObject(new AR.GeoLocation(1, 2, 3, 4), {});
      res = a.createImageResource(mockDetails.thumb_link, geoObject, "placemarkGeoObjects");
      d = a.createImageDrawable(res, {});
      a.setOpacityAndScaleOnDrawable(d, 1000);
      expect(d.scale).toEqual(a.scalingFactor(1000));
      return expect(d.opacity).toEqual(a.scalingFactor(1000));
    });
    it("cleans up images", function() {
      spyOn(a, 'destroyGeoObject').andCallThrough();
      a.createGeoObject("test", {
        lat: 55.8791,
        long: -4.2787,
        alt: 0
      }, "test.jpg", mockRels[0], "photoGeoObjects");
      a.locationChanged(1, 2, 3, 3);
      a.cleanUpPhotos();
      expect(a.destroyGeoObject).toHaveBeenCalled();
      return expect(a.placemarkGeoObjects).toEqual({});
    });
    it("sets the last location on a location change", function() {
      a.setMode("placemark");
      a.locationChanged(53, -2, 0, 3);
      a.locationChanged(55, -4, 0, 3);
      return expect(a.lastLocation.latitude).toEqual(55);
    });
    return it("updates images on a valid location change", function() {
      spyOn(a, 'updatePhotos').andCallThrough();
      a.setMode("photo");
      a.locationChanged(54, -3, 0, 3);
      return expect(a.updatePhotos).toHaveBeenCalled();
    });
  });

}).call(this);
